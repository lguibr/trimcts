name: TRIMCTS_CI_CD

on:
  push:
    branches: [main]
  pull_request:

jobs:
  lint_and_type_check:
    name: Lint & Type Check (Python 3.12)
    runs-on: ubuntu-latest # Run on the fastest/cheapest runner for static checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml' # Cache based on pyproject.toml

      - name: Install Linters
        run: pip install ruff mypy

      - name: Run Ruff Formatter Check
        run: ruff format --check .

      - name: Run Ruff Linter
        run: ruff check .

      - name: Run MyPy
        # Install core dependencies needed for MyPy to understand imports,
        # including pytest for the tests directory.
        # MyPy config should handle ignoring missing imports for others.
        run: |
          pip install numpy pydantic typing-extensions pytest
          mypy src tests

  build_wheels:
    name: Build Wheel (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: lint_and_type_check # Optional: Only build if linting passes
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
        # Add architecture if needed, e.g., for macOS ARM vs Intel
        # include:
        #   - os: macos-latest
        #     python-version: '3.10'
        #     architecture: x64
        #   - os: macos-latest
        #     python-version: '3.10'
        #     architecture: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive # Ensure submodules are checked out if needed for build

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # architecture: ${{ matrix.architecture }} # Uncomment if using architecture matrix

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pybind11>=2.10 cmake

      - name: Build wheel
        # Build wheel, place it in dist/, --no-deps ensures dependencies aren't bundled
        run: pip wheel . --wheel-dir dist/ --no-deps

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.python-version }} # Unique name per matrix entry
          path: dist/*.whl # Upload the built wheel file(s)

  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: build_wheels # Ensure wheels are built before testing
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
        # Add architecture if needed, matching the build_wheels matrix
        # include:
        #   - os: macos-latest
        #     python-version: '3.10'
        #     architecture: x64
        #   - os: macos-latest
        #     python-version: '3.10'
        #     architecture: arm64

    steps:
      - name: Checkout code # Needed for test files
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # architecture: ${{ matrix.architecture }} # Uncomment if using architecture matrix
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist # Download to dist/ directory

      - name: Install package from wheel and test dependencies
        run: |
          # Install the specific wheel built for this platform
          pip install dist/*.whl
          # Install dev dependencies (includes test tools and runtime deps via extras)
          pip install .[dev]

      - name: Run tests with coverage
        run: pytest --cov=src/trimcts --cov-report=xml

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
          path: coverage.xml

  upload_coverage:
    name: Upload Coverage to Codecov
    runs-on: ubuntu-latest
    needs: test # Run after all test jobs complete
    if: github.repository == 'lguibr/trimcts' && (github.event_name == 'push' || github.event_name == 'pull_request') # Only run on main repo pushes/PRs

    steps:
      - name: Checkout code (optional, needed by codecov action sometimes)
        uses: actions/checkout@v4

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          # Use a pattern to download all coverage files if action supports it,
          # otherwise download them individually or download all artifacts and filter.
          # For simplicity, let's download all artifacts to a known location.
          path: artifacts # Download all artifacts into 'artifacts' directory

      - name: List downloaded artifacts (for debugging)
        run: ls -R artifacts

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4 # v4 should handle merging automatically
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # Point the action to the directory containing all coverage reports
          # Adjust the directory structure if needed based on download artifact behavior
          directory: artifacts/ # Tell action to search this directory
          fail_ci_if_error: true
          verbose: true # Enable verbose logging for debugging