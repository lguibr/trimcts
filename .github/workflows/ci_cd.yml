# File: .github/workflows/ci_cd.yml
name: TRIMCTS_CI_CD

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  pull_request:
    branches: [main] # Run on PRs targeting main

jobs:
  lint_and_type_check:
    name: Lint & Type Check (Python 3.12)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Install Linters
        run: pip install ruff mypy

      - name: Run Ruff Formatter Check
        run: ruff format --check .

      - name: Run Ruff Linter
        run: ruff check .

      - name: Run MyPy
        run: |
          pip install numpy pydantic typing-extensions pytest
          mypy src tests

  build_wheels:
    name: Build Wheel (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: lint_and_type_check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pybind11>=2.10 cmake

      - name: Build wheel
        run: pip wheel . --wheel-dir dist/ --no-deps

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/*.whl

  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: build_wheels
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - name: Checkout code # Needed for test files
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: python-wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist

      - name: Install package from wheel and test dependencies
        run: |
          pip install dist/*.whl
          pip install .[dev]

      - name: Run tests with coverage
        run: pytest --cov=src/trimcts --cov-report=xml

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
          path: coverage.xml

  upload_coverage:
    name: Upload Coverage to Codecov
    runs-on: ubuntu-latest
    needs: test
    if: github.repository == 'lguibr/trimcts' && (github.event_name == 'push' || github.event_name == 'pull_request')

    steps:
      - name: Checkout code # Checkout needed for path mapping by Codecov
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate commit info

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          # Download all artifacts directly into the 'artifacts' directory
          path: artifacts
          pattern: coverage-* # Download only coverage artifacts
          merge-multiple: true # Merge artifacts with same name from different jobs

      - name: List downloaded artifacts (for debugging)
        # This should now show coverage-os-py/coverage.xml inside artifacts/
        run: ls -R artifacts

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # Point the action to the directory containing the downloaded artifact folders
          # Codecov action v4 should search recursively within this directory
          directory: artifacts/
          fail_ci_if_error: true
          verbose: true # Keep verbose logging

  publish_to_pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && github.repository == 'lguibr/trimcts'

    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: python-wheels-*
          merge-multiple: true

      - name: List downloaded wheels (for debugging)
        run: ls -R dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
